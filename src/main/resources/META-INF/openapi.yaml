openapi: 3.0.2
info:
  contact:
    email: jland@redhat.com
    url: http://localhost:8080/api/v1
  description: My Todo list API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Todo
  version: 1.0.0
servers:
- description: Local Dev
  url: "http://{domain}:{port}/api/v1"
tags:
- name: todos
- name: user
paths:
  /todos:
    description: "The REST endpoint/path used to list and create zero or more `Todo`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      description: Gets a list of all `Todo` entities.
      operationId: gettodos
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Todo'
                type: array
          description: Successful response - returns an array of `Todo` entities.
      summary: List All todos
      tags:
      - todos
      x-accepts: application/json
      x-tags:
      - tag: todos
    post:
      description: Creates a new instance of a `Todo`.
      operationId: createTodo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        description: A new `Todo` to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: Successful response.
      summary: Create a Todo
      tags:
      - todos
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: todos
    summary: Path used to manage the list of todos.
  /todos/{todoId}:
    delete:
      description: Deletes an existing `Todo`.
      operationId: deleteTodo
      parameters:
      - description: A unique identifier for a `Todo`.
        explode: false
        in: path
        name: todoId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Successful response.
      summary: Delete a Todo
      tags:
      - todos
      x-accepts: application/json
      x-tags:
      - tag: todos
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Todo`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      description: Gets the details of a single instance of a `Todo`.
      operationId: getTodo
      parameters:
      - description: A unique identifier for a `Todo`.
        explode: false
        in: path
        name: todoId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: Successful response - returns a single `Todo`.
      security:
      - KeyCloak: []
      summary: Get a Todo
      tags:
      - todos
      x-accepts: application/json
      x-tags:
      - tag: todos
    put:
      description: Updates an existing `Todo`.
      operationId: updateTodo
      parameters:
      - description: A unique identifier for a `Todo`.
        explode: false
        in: path
        name: todoId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        description: Updated `Todo` information.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
          description: Successful response.
      summary: Update a Todo
      tags:
      - todos
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: todos
    summary: Path used to manage a single Todo.
  /user:
    description: Return user profile based on authenticated user's OAuth2 Access Token
    get:
      description: Return the current user profile
      operationId: getUserProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user profile information
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    summary: Get the currently logged on user's profile data
components:
  schemas:
    User:
      description: User information
      example:
        name: name
        preferred_username: preferred_username
        given_name: given_name
        family_name: family_name
      properties:
        family_name:
          type: string
        given_name:
          type: string
        name:
          type: string
        preferred_username:
          type: string
      title: User
    Todo:
      description: A Todo list item
      example:
        id: ec3b48dc-938d-11ea-8877-c7ea413b00cb
        title: Example Todo
        description: This is a Todo entity with a description
        created: 2020-05-14T09:00:00.000Z
        dueDate: 2020-05-20T09:00:00.000Z
        complete: false
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        dueDate:
          format: date-time
          type: string
        author:
          readOnly: true
          type: string
        completed:
          type: boolean
      required:
      - title
      title: Todo
      type: object
